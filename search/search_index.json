{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"Welcome to UBELIX OnDemand","text":"<p>Warning</p> <p>This is a pre-release version of the UBELIX OnDemand portal. There will be bugs. Please report them at https://serviceportal.unibe.ch/hpc.</p> <p>UBELIX OnDemand is an exciting new service providing easy access to the HPC system at Unibe, designed with user-friendliness in mind.</p> <p>With the new OnDemand portal available at https://ondemand.hpc.unibe.ch, you can:</p> <ul> <li>Browse Files: Easily navigate your files, with the option to upload and download smaller files for quick access and management.</li> <li>View Jobs: Keep track of your currently running jobs, helping you stay informed about your computational tasks.</li> <li>Web-Based Shell Sessions: Start a web-based shell session on a UBELIX submit node, allowing you to interact with the system without needing a local terminal.</li> <li>Jupyter Lab/Notebook: Launch a Jupyter Lab/Notebook server on a compute node directly from your browser, ideal for data analysis, scientific computing, and interactive coding.</li> <li>(VS)Code Server: Start a (VS)Code server on a compute node, enabling you to code and develop directly in your browser with the powerful features of Visual Studio Code.</li> </ul> <p>Please note that while UBELIX OnDemand offers a user-friendly, interactive interface, it does not replace the command line login to UBELIX. The command line remains the more powerful option for performing extensive and complex tasks, offering greater flexibility and control over your computing environment. UBELIX OnDemand is a new low barrier entry to the HPC system at Unibe.</p>"},{"location":"code-server.html","title":"(VS)Code server","text":"<p>The (VS)Code server allows you to use the (VS)Code editor on UBELIX from your browser.</p> <ol> <li>Select the (VS)Code Server app under Interactive Apps    </li> <li>Provide the job specification you want for the (VS)Code Server    </li> <li>Once your server is ready, click <code>Connect to VS Code</code> to access it.    </li> </ol> <p>Warning</p> <p>The job may still be running if you close the window or log out. When you are done, shut down (VS)Code Server by clicking <code>Delete</code> on the session under My Interactive Sessions. You can confirm that the interactive session has stopped by checking My Interactive Sessions.</p>"},{"location":"code-server.html#known-limitations","title":"Known limitations","text":"<p>coming soon</p>"},{"location":"feedback.html","title":"Feedback","text":"<p>As this service is still in it\u2019s pre-release phase we need your feedback to evaluate what\u2019s working well and what needs improvement.</p> <p>We value your feedback via a support ticket at https://serviceportal.unibe.ch/hpc.</p>"},{"location":"feedback.html#getting-help","title":"Getting Help","text":"<p>In case of questions, comments or issues get in touch with us. Please first collect all necessary details. In case of issues, this should include:</p> <ul> <li>Job ID and (if available) Session ID</li> <li>location of job scripts</li> <li>location of output/error files</li> <li>the full error message(s)</li> <li>your user name</li> <li>detailed description of expectation and observation</li> <li>Please open a ticket via https://serviceportal.unibe.ch/hpc.</li> </ul>"},{"location":"jupyter.html","title":"Jupyter","text":"<p>The Jupyter server allows you to use the start interactive Python editors on UBELIX from your browser.</p> <ol> <li>Select the Jupyter Notebook app under Interactive Apps        </li> <li>Provide the job specification you want for the Jupyter Server    </li> <li>Once your server is ready, click <code>Connect to Jupyter</code> to access it.    </li> </ol> <p>Warning</p> <p>The job may still be running if you close the window or log out. When you are done, shut down Jupyter by clicking <code>Delete</code> on the session under My Interactive Sessions. You can confirm that the interactive session has stopped by checking My Interactive Sessions.</p> <p>At this point you should already have a fully working Jupyter environment. To start working with Jupyter Notebooks, please also see the Jupyter Documentation.</p>"},{"location":"jupyter.html#loading-software-modules","title":"Loading software modules","text":"<p>You can load additional software modules directly from within Jupyter using the modules extensions:</p> <ol> <li>Choose the Module View from the left side panel</li> <li>Search for the desired module in the search top search bar</li> <li>Load/Unload modules as required</li> </ol> <p></p>"},{"location":"jupyter.html#installing-python-packages","title":"Installing Python packages","text":"<p>A variety of standard Python packages (such as numpy, scipy, matplotlib and pandas) are available automatically. To see what packages are available, open a Terminal notebook or open a Terminal on UBELIX. Then load the Ananaconda3 module and list the installed packages:</p> <pre><code>module load Anaconda3/2024.02-1\neval \"$(conda shell.bash hook)\"\nconda list\n</code></pre> <p>There should be no issues using conda or pip to install or upgrade packages and then use them in a Jupyter notebook, but you will need to make sure to install the new versions or additional packages in your home or scratch directories because you do not have write permissions to the module directories. If you\u2019d like to install packages with <code>conda install</code> you\u2019ll need to create a conda environment in which to install packages and then create a kernel associated with your Conda environment as discussed in the next section. If you need just a few extra packages you can use <code>pip install --user &lt;package&gt;</code> to install the missing packages.</p> <p>Tip</p> <p>We recommend using conda environments over pip installed packages as these are less prone to package conflicts during system upgrades. If you\u2019re experienced with Python virtualenvs you may choose these as well.</p>"},{"location":"jupyter.html#adding-new-kernels","title":"Adding new kernels","text":"<p>Jupyter supports notebooks in dozens of languages, including IPython, R, Julia, etc. If you\u2019d like to use a language not already present in the default Jupyter configuration, you\u2019ll need to create your own kernel. You may also need to create your own kernel for a language already supported if you want to customize your environment. For example if you\u2019d like to work in your conda environments when using your notebook.</p>"},{"location":"jupyter.html#adding-a-conda-environment-to-jupyter","title":"Adding a conda environment to Jupyter","text":"<p>You can add a new (Python) kernel to your Jupyter based on a conda environment. When in Jupyter, you will then be able to select the name from the kernel list, and it will be using the packages you installed. Follow these steps to do this (replacing <code>&lt;env&gt;</code> with the name you want to give your conda environment):</p> <pre><code>conda activate &lt;env&gt;\npython -m ipykernel install --user --name &lt;env&gt;\n</code></pre>"},{"location":"jupyter.html#removing-a-conda-environment-from-jupyter","title":"Removing a conda environment from Jupyter","text":"<p>If you remove conda environments using <code>conda remove --name &lt;env&gt; --all</code> the Jupyter kernel is left behind leading to a broken kernel. You can remove the broken kernel using:</p> <pre><code>jupyter kernelspec uninstall &lt;unwanted-kernel&gt;\n</code></pre>"},{"location":"jupyter.html#working-with-jupyter-extensions","title":"Working with jupyter extensions","text":"<p>Warning</p> <p>Using additional Jupyter extensions is considered an expert feature from our side. Please note that we can\u2019t provide support for issues with extensions at this time. (Beta testers: If you have suggestions on this workflow we\u2019re happy to hear them!)</p> <p>Since jupyter is installed in a location that is not writable by regular users, the Jupyter Extension Manager is read-only. This means you can\u2019t install, remove, enable or disable Jupyter extensions directly from the Extension Manager within Jupyter.</p> <p>If you want to use custom jupyter extensions please follow the following procedure:</p> <ol> <li>Load the Anaconda3 module that is used for OnDemand Jupyter:    <pre><code>module load Anaconda3/2024.02-1\n</code></pre></li> <li>Ensure the <code>pip</code> version matches the following:    <pre><code>$ which pip\n/software.9/software/Anaconda3/2024.02-1/bin/pip\n</code></pre></li> <li>Install a jupyterlab extension <code>&lt;jupyterlab_extension&gt;</code> ensuring it will be    compatible with the OnDemand jupyter version (4.0.11):    <pre><code>pip install jupyterlab==4.0.11 &lt;jupyter_extension&gt; --user\n</code></pre></li> </ol> <p>Warning</p> <p>It is important that the jupyterlab version specified matches the version on    the server (<code>jupyterlab==4.0.11</code>) exactly. Otherwise you might end up with a    incomtatible versions that could prevent your notebook from starting.</p> <p>If you no longer need an extension please remove it from your Jupyter using:</p> <pre><code>pip uninstall &lt;jupyter_extension&gt;\n</code></pre> <p>After stopping and restarting your server, when you return to the Jupyter page, you should see your extensions added or removed from the Extension Manager.</p>"},{"location":"jupyter.html#known-limitations","title":"Known limitations","text":"<ul> <li>Extensions: It is not possible to enable/disable Jupyter extensions through   the Extension manager. Please see the section   Working  with jupyter extensions</li> </ul>"},{"location":"overview.html","title":"OnDemand Overview","text":"<p>We provide interactive HPC access including various interactive apps through the browser-based UBELIX OnDemand service available at https://ondemand.hpc.unibe.ch.</p>"},{"location":"overview.html#loggin-in","title":"Loggin In","text":"<p>Tip</p> <p>UBELIX OnDemand requires an active UBELIX HPC account. Please request an account following the instructions in the documentation before you try to use the OnDemand portal!</p> <ol> <li>Visit https://ondemand.hpc.unibe.ch in your    web browser.</li> <li>You will be greeted by the Unibe Microsoft login screen. Use your @unibe.ch or @students.unibe.ch email address and the    correspoding password to log in.    </li> <li>You will be asked to grant the OnDemand    access to some of your profile information including your email. This is    required to map your adress to a local user account.</li> <li>Once the login is complete you will see the UBELIX OnDemand dashboard:    </li> </ol>"},{"location":"overview.html#files-app","title":"Files App","text":"<p>Access the Files App from the top menu bar under <code>Files &gt; Home Directory</code>. Using the Files App, you can use your web browser to:</p> <ul> <li>View files in the UBELIX filesystem.</li> <li>Create and delete files and directories.</li> <li>Upload and download (small) files from the UBELIX filesystem to your computer.</li> </ul> <p></p>"},{"location":"overview.html#view-active-jobs","title":"View Active Jobs","text":"<p>View and cancel active Slurm jobs from <code>Jobs &gt; Active Jobs</code>. This includes jobs started via <code>sbatch</code> and <code>srun</code>as well as jobs started (implicitly) via UBELIX OnDemand.</p>"},{"location":"overview.html#shell-access","title":"Shell Access","text":"<p>UBELIX OnDemand allows easy browser based UBELIX shell access from the top menu bar under <code>Clusters &gt; UBELIX Shell Access</code>.</p>"},{"location":"overview.html#interactive-apps","title":"Interactive Apps","text":"<p>UBELIX OnDemand provides interactive apps. You can launch interactive apps from the <code>Interactive Apps</code> menu on the top menu bar. The available interactive apps include:</p> <ul> <li> Jupyter Server (for working with Jupyter notebooks)</li> <li> RStudio Server (for working in RStudio sessions)</li> <li> Code Server (VS Code) (for code editing using Visual Studio    Code)</li> </ul>"},{"location":"rstudio.html","title":"RStudio","text":"<p>The RStudio server allows you to use RStudio on UBELIX.</p> <ol> <li>Select the RStudio Server app under Interactive Apps    </li> <li>Provide the job specification you want for the RStudio server    </li> <li>Once RStudio is ready, click <code>Connect to RStudio Server</code> to access RStudio.    </li> </ol> <p>Warning</p> <p>The job may still be running if you close the window or log out. When you are done, shut down RStudio by clicking <code>Delete</code> on the session under My Interactive Sessions. You can confirm that the interactive session has stopped by checking My Interactive Sessions.</p>"},{"location":"rstudio.html#loading-software-modules","title":"Loading software modules","text":"<p>If you need to load additional software modules within RStudio you can open a Terminal window within RStudio to use the familiar <code>module</code> commands. Note that you need to restart R from within RStudio to pickup the newly loaded modules.</p> <p>Alternatively you can add additional module commands in the Environment Setup section of the RStudio submission form in the OnDemand portal, i.e,</p> <pre><code>module load HDF/4.2.15-GCCcore-11.3.0\n</code></pre>"},{"location":"rstudio.html#installing-r-packages","title":"Installing R packages","text":"<p>A vast amount of core R packages are pre-installed centrally - you can see what is available by using the <code>library()</code> function within R. However, given the number of packages and multiple versions available, other packages should be installed by the user.</p> <p>Installing R packages from CRAN is pretty straightforward thanks to install.packages() function. For instance:</p> <pre><code>&gt; install.packages(c(\"ggplot2\", \"dplyr\"))\n</code></pre> <p>By default, when you install R packages, R will try to install them in the central installation. Since this central installation is shared among all users on the cluster, it\u2019s obviously impossible to install directly your packages there. This is why this location is not writable and you will get this kind of message:</p> <pre><code>&gt; install.packages(\"ggplo2\")\nWarning in install.packages(\"ggplo2\") :\n  'lib = \"/software.9/software/R/4.2.1-foss-2022a/lib/R/library/\"' is not writable\nWould you like to use a personal library instead? (yes/No/cancel)\n</code></pre> <p>This is why you have to answer yes to this \u201cWould you like to use a personal library instead?\u201d question.</p>"},{"location":"rstudio.html#known-limitations","title":"Known limitations","text":"<ul> <li>custom R versions, e.g. from Anaconda are not supported.   If you have an idea on how to make this happen, get in touch!</li> <li>you need to properly stop your R session from within RStudio Server before you exit or you will receive Warnings after the next login</li> <li>RStudio Server doesn\u2019t know about any SLURM environment variables. Use <code>system('nproc')</code> is a reliable way to determine how many cores are actually available to you. Please avoid using <code>parallel::detectCores()</code> in your code as it does not return the number of \u201callowed\u201d cores correctly.</li> </ul>"},{"location":"troubleshooting.html","title":"Troubleshooting OnDemand","text":""},{"location":"troubleshooting.html#common-problems","title":"Common problems","text":"<p>coming soon</p>"},{"location":"troubleshooting.html#general-information-for-troubleshooting-ondemand","title":"General information for troubleshooting OnDemand","text":"<p>Logs and scripts for each interactive session with Open OnDemand are stored in:</p> <pre><code>~/ondemand/data/sys/dashboard/batch_connect/sys\n</code></pre> <p>There are directories for each interactive app type within this directory. For example, to see the scripts and logs for an RStudio session, you might look at the files under:</p> <pre><code>~/ondemand/data/sys/dashboard/batch_connect/sys/rstudio/output/b5733507-a750-4bb9-8d4b-710618ce0de1\n</code></pre> <p>where <code>b5733507-a750-4bb9-8d4b-710618ce0de1</code> corresponds to a specific session of an OOD app (the RStudio app in this case).</p>"},{"location":"troubleshooting.html#getting-help","title":"Getting Help","text":"<p>In case of questions, comments or issues get in touch with us. Please first collect all necessary details. In case of issues, this should include:</p> <ul> <li>Job ID and (if available) Session ID</li> <li>location of job scripts</li> <li>location of output/error files</li> <li>the full error message(s)</li> <li>your user name</li> <li>detailed description of expectation and observation</li> <li>Please open a ticket via https://serviceportal.unibe.ch/hpc.</li> </ul>"}]}